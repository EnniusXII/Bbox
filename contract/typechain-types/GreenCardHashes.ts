/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface GreenCardHashesInterface extends Interface {
  getFunction(
    nameOrSignature: "getHash" | "storeHash" | "verifyHash"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "HashStored"): EventFragment;

  encodeFunctionData(functionFragment: "getHash", values: [string]): string;
  encodeFunctionData(
    functionFragment: "storeHash",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyHash",
    values: [string, string]
  ): string;

  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "storeHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyHash", data: BytesLike): Result;
}

export namespace HashStoredEvent {
  export type InputTuple = [id: string, hash: string, timestamp: BigNumberish];
  export type OutputTuple = [id: string, hash: string, timestamp: bigint];
  export interface OutputObject {
    id: string;
    hash: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GreenCardHashes extends BaseContract {
  connect(runner?: ContractRunner | null): GreenCardHashes;
  waitForDeployment(): Promise<this>;

  interface: GreenCardHashesInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getHash: TypedContractMethod<[id: string], [[string, bigint]], "view">;

  storeHash: TypedContractMethod<
    [id: string, hash: string],
    [void],
    "nonpayable"
  >;

  verifyHash: TypedContractMethod<
    [id: string, hash: string],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getHash"
  ): TypedContractMethod<[id: string], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "storeHash"
  ): TypedContractMethod<[id: string, hash: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyHash"
  ): TypedContractMethod<[id: string, hash: string], [boolean], "view">;

  getEvent(
    key: "HashStored"
  ): TypedContractEvent<
    HashStoredEvent.InputTuple,
    HashStoredEvent.OutputTuple,
    HashStoredEvent.OutputObject
  >;

  filters: {
    "HashStored(string,string,uint256)": TypedContractEvent<
      HashStoredEvent.InputTuple,
      HashStoredEvent.OutputTuple,
      HashStoredEvent.OutputObject
    >;
    HashStored: TypedContractEvent<
      HashStoredEvent.InputTuple,
      HashStoredEvent.OutputTuple,
      HashStoredEvent.OutputObject
    >;
  };
}
